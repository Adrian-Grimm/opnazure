name: Deployment Checker - two-nics
# Prerequisites
# 1. Set up your AZURE CREDENTIALS SECRET as per : https://github.com/marketplace/actions/azure-login#configure-a-service-principal-with-a-secret
# 2. Make sure the Service Principal has IAM Owner on the Resource Group you're deploying into.

on:
  #Run on Manual execution
  workflow_dispatch:

  #Run when bicep code changes
  push:
    paths:
      - "bicep/main-two-nics.bicep"
      - "bicep/main-two-nics.parameters.json"
      - ".github/workflows/deploymentCheker-two-nics.yml"

  #Run when PR's are made to main, where the changes are in the bicep directory or this workflow file itself
  # pull_request:
  #   branches: [main]
  #   paths:
  #     - "bicep/*"
  #     - ".github/workflows/StandardCI.yml"

  #Run on a weekly schedule
  #schedule:
    # At 11:00pm, every Tuesday week
  #  - cron: "0 23 * * 2"
env:
  RG: "Automation-Actions-OPNAZURE-two-nics" #The resource group we're deploying to.
  ParamFilePath: "bicep/main-two-nics.parameters.json" #Path to parameter file
  TemplateFilePath: "bicep/main-two-nics.bicep"
  OPNsense-PIP: "OPNsense-PublicIP"
  VNET: "OPN-VNET"
  VNETAddress: "10.0.0.0/16"
  UntrustedSubnet: "Untrusted-Subnet"
  UntrustedSubnetAddress: "10.0.0.0/24"
  TrustedSubnet: "Trusted-Subnet"
  TrustedSubnetAddress: "10.0.1.0/24"
  DEPNAME: "Dep-OPNsense-two-nics-${{ github.run_number }}" #Deployment Name
  AZCLIVERSION: 2.29.2 #Pinning to a specific AZ CLI version

jobs:
  Validation:
    runs-on: ubuntu-latest
    steps:
      #Get the code files from the repo
      - uses: actions/checkout@v2

      - name: Job parameter check
        run: |
          RG='${{ env.RG }}'
          echo "RG is: $RG"

          echo "Param file path is: ${{ env.ParamFilePath }}"
          echo "Template file path is: ${{ env.TemplateFilePath }}"
          echo "Deployment name is ${{ env.DEPNAME }}"
          echo "AZ cli version is ${{ env.AZCLIVERSION }}"

      - name: Arm Parameter file check exists
        shell: pwsh
        run: |
          Write-Output "Checking parameter file existance/contents"
          $paramFilePath="${{ env.ParamFilePath }}"
          Test-Path $paramFilePath

          if (Test-Path $paramFilePath) {
            $paramFileContent=Get-Content $paramFilePath
            Write-Output $paramFileContent
          }

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Validate Infrastructure deployment
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            DEPNAME='${{ env.DEPNAME }}'
            VNET='${{ env.VNET }}'
            VNETAddress='${{ env.VNETAddress }}'
            UntrustedSubnet='${{ env.UntrustedSubnet }}'
            UntrustedSubnetAddress='${{ env.UntrustedSubnetAddress }}'
            TrustedSubnet='${{ env.TrustedSubnet }}'
            TrustedSubnetAddress='${{ env.TrustedSubnetAddress }}'
            az group create -l eastus -g $RG
            az network vnet create -g $RG -n $VNET --address-prefixes $VNETAddress
            az network vnet subnet create -g $RG --vnet-name $VNET -n $UntrustedSubnet --address-prefixes $UntrustedSubnetAddress
            az network vnet subnet create -g $RG --vnet-name $VNET -n $TrustedSubnet --address-prefixes $TrustedSubnetAddress

            # sleep 5
            az deployment group validate -f ${{ env.TemplateFilePath }} -g $RG -p ${{ env.ParamFilePath }}

  Deploy:
    runs-on: ubuntu-latest
    needs: [Validation]
    #if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop'
    #environment: azurecirgs
    # outputs:
    #   AKSNAME: ${{ steps.deployAks.outputs.AKSNAME}}
    steps:
      - uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Deploy Infrastructure
        id: deployAks
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            DEPNAME='${{ env.DEPNAME }}'
            az deployment group create -f ${{ env.TemplateFilePath }} -g $RG -p ${{ env.ParamFilePath }} --name $DEPNAME --verbose

            # DEPSTATUS=$(az deployment operation group list --resource-group $RG --name $DEPNAME) #--query "[?properties.provisioningState=='Failed']"
            # echo $DEPSTATUS

            # #outputs
            # AKSNAME=$(az deployment group show -n $DEPNAME -g $RG --query "properties.outputs.aksClusterName.value" -o tsv)
            # echo "AKSName returned from az deployment = $AKSNAME"
            # echo "::set-output name=AKSNAME::$AKSNAME" #outputting for conditon

  CheckOPNsenseAvailability:
    runs-on: ubuntu-latest
    needs: [Deploy]
    #environment: azurecirgs
    steps:
      - uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Test OPNsense Access
        run: |
          AKSNAME='${{ needs.Deploy.outputs.AKSNAME}}'
          RG='${{ env.RG }}'
          PIP='${{ env.OPNsense-PIP }}'
          PIP=$(az network public-ip show -g $RG -n $PIP --query "ipAddress" -o tsv)
          curl -k https://$PIP --verbose

  Cleanup:
    runs-on: ubuntu-latest
    needs: [Validation, Deploy, CheckOPNsenseAvailability]
    #if: github.event_name == 'schedule'
    if: always()
    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Cleanup
        uses: Azure/cli@1.0.4
        with:
          azcliversion: ${{ env.AZCLIVERSION }}
          inlineScript: |
            RG='${{ env.RG }}'
            DEPNAME='${{ env.DEPNAME }}'
            az group delete -n $RG -y --verbose